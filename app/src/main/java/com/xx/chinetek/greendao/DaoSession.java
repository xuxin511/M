package com.xx.chinetek.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.xx.chinetek.model.Base.MaterialModel;
import com.xx.chinetek.model.Base.CustomModel;
import com.xx.chinetek.model.Base.SyncParaModel;
import com.xx.chinetek.model.DN.DNModel;
import com.xx.chinetek.model.DN.DNDetailModel;

import com.xx.chinetek.greendao.MaterialModelDao;
import com.xx.chinetek.greendao.CustomModelDao;
import com.xx.chinetek.greendao.SyncParaModelDao;
import com.xx.chinetek.greendao.DNModelDao;
import com.xx.chinetek.greendao.DNDetailModelDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig materialModelDaoConfig;
    private final DaoConfig customModelDaoConfig;
    private final DaoConfig syncParaModelDaoConfig;
    private final DaoConfig dNModelDaoConfig;
    private final DaoConfig dNDetailModelDaoConfig;

    private final MaterialModelDao materialModelDao;
    private final CustomModelDao customModelDao;
    private final SyncParaModelDao syncParaModelDao;
    private final DNModelDao dNModelDao;
    private final DNDetailModelDao dNDetailModelDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        materialModelDaoConfig = daoConfigMap.get(MaterialModelDao.class).clone();
        materialModelDaoConfig.initIdentityScope(type);

        customModelDaoConfig = daoConfigMap.get(CustomModelDao.class).clone();
        customModelDaoConfig.initIdentityScope(type);

        syncParaModelDaoConfig = daoConfigMap.get(SyncParaModelDao.class).clone();
        syncParaModelDaoConfig.initIdentityScope(type);

        dNModelDaoConfig = daoConfigMap.get(DNModelDao.class).clone();
        dNModelDaoConfig.initIdentityScope(type);

        dNDetailModelDaoConfig = daoConfigMap.get(DNDetailModelDao.class).clone();
        dNDetailModelDaoConfig.initIdentityScope(type);

        materialModelDao = new MaterialModelDao(materialModelDaoConfig, this);
        customModelDao = new CustomModelDao(customModelDaoConfig, this);
        syncParaModelDao = new SyncParaModelDao(syncParaModelDaoConfig, this);
        dNModelDao = new DNModelDao(dNModelDaoConfig, this);
        dNDetailModelDao = new DNDetailModelDao(dNDetailModelDaoConfig, this);

        registerDao(MaterialModel.class, materialModelDao);
        registerDao(CustomModel.class, customModelDao);
        registerDao(SyncParaModel.class, syncParaModelDao);
        registerDao(DNModel.class, dNModelDao);
        registerDao(DNDetailModel.class, dNDetailModelDao);
    }
    
    public void clear() {
        materialModelDaoConfig.clearIdentityScope();
        customModelDaoConfig.clearIdentityScope();
        syncParaModelDaoConfig.clearIdentityScope();
        dNModelDaoConfig.clearIdentityScope();
        dNDetailModelDaoConfig.clearIdentityScope();
    }

    public MaterialModelDao getMaterialModelDao() {
        return materialModelDao;
    }

    public CustomModelDao getCustomModelDao() {
        return customModelDao;
    }

    public SyncParaModelDao getSyncParaModelDao() {
        return syncParaModelDao;
    }

    public DNModelDao getDNModelDao() {
        return dNModelDao;
    }

    public DNDetailModelDao getDNDetailModelDao() {
        return dNDetailModelDao;
    }

}
