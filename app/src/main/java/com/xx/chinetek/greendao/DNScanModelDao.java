package com.xx.chinetek.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xx.chinetek.model.DN.DNScanModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DNSCAN_MODEL".
*/
public class DNScanModelDao extends AbstractDao<DNScanModel, Void> {

    public static final String TABLENAME = "DNSCAN_MODEL";

    /**
     * Properties of entity DNScanModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AGENT_DN_NO = new Property(0, String.class, "AGENT_DN_NO", false, "AGENT__DN__NO");
        public final static Property LINE_NO = new Property(1, Integer.class, "LINE_NO", false, "LINE__NO");
        public final static Property SERIAL_NO = new Property(2, String.class, "SERIAL_NO", false, "SERIAL__NO");
        public final static Property PACKING_DATE = new Property(3, String.class, "PACKING_DATE", false, "PACKING__DATE");
        public final static Property REGION = new Property(4, String.class, "REGION", false, "REGION");
        public final static Property COUNTRY = new Property(5, String.class, "COUNTRY", false, "COUNTRY");
        public final static Property ITEM_NO = new Property(6, String.class, "ITEM_NO", false, "ITEM__NO");
        public final static Property GOLFA_CODE = new Property(7, String.class, "GOLFA_CODE", false, "GOLFA__CODE");
        public final static Property STATUS = new Property(8, String.class, "STATUS", false, "STATUS");
        public final static Property ITEM_STATUS = new Property(9, String.class, "ITEM_STATUS", false, "ITEM__STATUS");
        public final static Property DEAL_SALE_DATE = new Property(10, java.util.Date.class, "DEAL_SALE_DATE", false, "DEAL__SALE__DATE");
        public final static Property ITEM_NAME = new Property(11, String.class, "ITEM_NAME", false, "ITEM__NAME");
        public final static Property MAT_TYPE = new Property(12, Integer.class, "MAT_TYPE", false, "MAT__TYPE");
    }

    private Query<DNScanModel> dNDetailModel_SERIALSQuery;

    public DNScanModelDao(DaoConfig config) {
        super(config);
    }
    
    public DNScanModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DNSCAN_MODEL\" (" + //
                "\"AGENT__DN__NO\" TEXT," + // 0: AGENT_DN_NO
                "\"LINE__NO\" INTEGER," + // 1: LINE_NO
                "\"SERIAL__NO\" TEXT," + // 2: SERIAL_NO
                "\"PACKING__DATE\" TEXT," + // 3: PACKING_DATE
                "\"REGION\" TEXT," + // 4: REGION
                "\"COUNTRY\" TEXT," + // 5: COUNTRY
                "\"ITEM__NO\" TEXT," + // 6: ITEM_NO
                "\"GOLFA__CODE\" TEXT," + // 7: GOLFA_CODE
                "\"STATUS\" TEXT," + // 8: STATUS
                "\"ITEM__STATUS\" TEXT," + // 9: ITEM_STATUS
                "\"DEAL__SALE__DATE\" INTEGER," + // 10: DEAL_SALE_DATE
                "\"ITEM__NAME\" TEXT," + // 11: ITEM_NAME
                "\"MAT__TYPE\" INTEGER);"); // 12: MAT_TYPE
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DNSCAN_MODEL_AGENT__DN__NO_LINE__NO_SERIAL__NO ON \"DNSCAN_MODEL\"" +
                " (\"AGENT__DN__NO\" ASC,\"LINE__NO\" ASC,\"SERIAL__NO\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DNSCAN_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DNScanModel entity) {
        stmt.clearBindings();
 
        String AGENT_DN_NO = entity.getAGENT_DN_NO();
        if (AGENT_DN_NO != null) {
            stmt.bindString(1, AGENT_DN_NO);
        }
 
        Integer LINE_NO = entity.getLINE_NO();
        if (LINE_NO != null) {
            stmt.bindLong(2, LINE_NO);
        }
 
        String SERIAL_NO = entity.getSERIAL_NO();
        if (SERIAL_NO != null) {
            stmt.bindString(3, SERIAL_NO);
        }
 
        String PACKING_DATE = entity.getPACKING_DATE();
        if (PACKING_DATE != null) {
            stmt.bindString(4, PACKING_DATE);
        }
 
        String REGION = entity.getREGION();
        if (REGION != null) {
            stmt.bindString(5, REGION);
        }
 
        String COUNTRY = entity.getCOUNTRY();
        if (COUNTRY != null) {
            stmt.bindString(6, COUNTRY);
        }
 
        String ITEM_NO = entity.getITEM_NO();
        if (ITEM_NO != null) {
            stmt.bindString(7, ITEM_NO);
        }
 
        String GOLFA_CODE = entity.getGOLFA_CODE();
        if (GOLFA_CODE != null) {
            stmt.bindString(8, GOLFA_CODE);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(9, STATUS);
        }
 
        String ITEM_STATUS = entity.getITEM_STATUS();
        if (ITEM_STATUS != null) {
            stmt.bindString(10, ITEM_STATUS);
        }
 
        java.util.Date DEAL_SALE_DATE = entity.getDEAL_SALE_DATE();
        if (DEAL_SALE_DATE != null) {
            stmt.bindLong(11, DEAL_SALE_DATE.getTime());
        }
 
        String ITEM_NAME = entity.getITEM_NAME();
        if (ITEM_NAME != null) {
            stmt.bindString(12, ITEM_NAME);
        }
 
        Integer MAT_TYPE = entity.getMAT_TYPE();
        if (MAT_TYPE != null) {
            stmt.bindLong(13, MAT_TYPE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DNScanModel entity) {
        stmt.clearBindings();
 
        String AGENT_DN_NO = entity.getAGENT_DN_NO();
        if (AGENT_DN_NO != null) {
            stmt.bindString(1, AGENT_DN_NO);
        }
 
        Integer LINE_NO = entity.getLINE_NO();
        if (LINE_NO != null) {
            stmt.bindLong(2, LINE_NO);
        }
 
        String SERIAL_NO = entity.getSERIAL_NO();
        if (SERIAL_NO != null) {
            stmt.bindString(3, SERIAL_NO);
        }
 
        String PACKING_DATE = entity.getPACKING_DATE();
        if (PACKING_DATE != null) {
            stmt.bindString(4, PACKING_DATE);
        }
 
        String REGION = entity.getREGION();
        if (REGION != null) {
            stmt.bindString(5, REGION);
        }
 
        String COUNTRY = entity.getCOUNTRY();
        if (COUNTRY != null) {
            stmt.bindString(6, COUNTRY);
        }
 
        String ITEM_NO = entity.getITEM_NO();
        if (ITEM_NO != null) {
            stmt.bindString(7, ITEM_NO);
        }
 
        String GOLFA_CODE = entity.getGOLFA_CODE();
        if (GOLFA_CODE != null) {
            stmt.bindString(8, GOLFA_CODE);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(9, STATUS);
        }
 
        String ITEM_STATUS = entity.getITEM_STATUS();
        if (ITEM_STATUS != null) {
            stmt.bindString(10, ITEM_STATUS);
        }
 
        java.util.Date DEAL_SALE_DATE = entity.getDEAL_SALE_DATE();
        if (DEAL_SALE_DATE != null) {
            stmt.bindLong(11, DEAL_SALE_DATE.getTime());
        }
 
        String ITEM_NAME = entity.getITEM_NAME();
        if (ITEM_NAME != null) {
            stmt.bindString(12, ITEM_NAME);
        }
 
        Integer MAT_TYPE = entity.getMAT_TYPE();
        if (MAT_TYPE != null) {
            stmt.bindLong(13, MAT_TYPE);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DNScanModel readEntity(Cursor cursor, int offset) {
        DNScanModel entity = new DNScanModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // AGENT_DN_NO
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // LINE_NO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SERIAL_NO
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PACKING_DATE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // REGION
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // COUNTRY
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ITEM_NO
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // GOLFA_CODE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // STATUS
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ITEM_STATUS
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // DEAL_SALE_DATE
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ITEM_NAME
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // MAT_TYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DNScanModel entity, int offset) {
        entity.setAGENT_DN_NO(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLINE_NO(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSERIAL_NO(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPACKING_DATE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setREGION(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCOUNTRY(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setITEM_NO(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGOLFA_CODE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSTATUS(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setITEM_STATUS(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDEAL_SALE_DATE(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setITEM_NAME(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMAT_TYPE(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DNScanModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DNScanModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(DNScanModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "SERIALS" to-many relationship of DNDetailModel. */
    public List<DNScanModel> _queryDNDetailModel_SERIALS(String AGENT_DN_NO, Integer LINE_NO) {
        synchronized (this) {
            if (dNDetailModel_SERIALSQuery == null) {
                QueryBuilder<DNScanModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AGENT_DN_NO.eq(null));
                queryBuilder.where(Properties.LINE_NO.eq(null));
                dNDetailModel_SERIALSQuery = queryBuilder.build();
            }
        }
        Query<DNScanModel> query = dNDetailModel_SERIALSQuery.forCurrentThread();
        query.setParameter(0, AGENT_DN_NO);
        query.setParameter(1, LINE_NO);
        return query.list();
    }

}
