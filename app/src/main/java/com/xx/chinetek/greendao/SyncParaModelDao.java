package com.xx.chinetek.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xx.chinetek.model.Base.SyncParaModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYNC_PARA_MODEL".
*/
public class SyncParaModelDao extends AbstractDao<SyncParaModel, Void> {

    public static final String TABLENAME = "SYNC_PARA_MODEL";

    /**
     * Properties of entity SyncParaModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "Key", false, "KEY");
        public final static Property Value = new Property(1, String.class, "Value", false, "VALUE");
    }


    public SyncParaModelDao(DaoConfig config) {
        super(config);
    }
    
    public SyncParaModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNC_PARA_MODEL\" (" + //
                "\"KEY\" TEXT UNIQUE ," + // 0: Key
                "\"VALUE\" TEXT);"); // 1: Value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNC_PARA_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SyncParaModel entity) {
        stmt.clearBindings();
 
        String Key = entity.getKey();
        if (Key != null) {
            stmt.bindString(1, Key);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(2, Value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SyncParaModel entity) {
        stmt.clearBindings();
 
        String Key = entity.getKey();
        if (Key != null) {
            stmt.bindString(1, Key);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(2, Value);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SyncParaModel readEntity(Cursor cursor, int offset) {
        SyncParaModel entity = new SyncParaModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Key
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // Value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SyncParaModel entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SyncParaModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SyncParaModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(SyncParaModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
