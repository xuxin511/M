package com.xx.chinetek.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xx.chinetek.model.Base.CustomModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOM_MODEL".
*/
public class CustomModelDao extends AbstractDao<CustomModel, Void> {

    public static final String TABLENAME = "CUSTOM_MODEL";

    /**
     * Properties of entity CustomModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PartnerID = new Property(0, String.class, "PartnerID", false, "PARTNER_ID");
        public final static Property PartnerName = new Property(1, String.class, "PartnerName", false, "PARTNER_NAME");
        public final static Property Type = new Property(2, String.class, "Type", false, "TYPE");
    }


    public CustomModelDao(DaoConfig config) {
        super(config);
    }
    
    public CustomModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_MODEL\" (" + //
                "\"PARTNER_ID\" TEXT UNIQUE ," + // 0: PartnerID
                "\"PARTNER_NAME\" TEXT," + // 1: PartnerName
                "\"TYPE\" TEXT);"); // 2: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomModel entity) {
        stmt.clearBindings();
 
        String PartnerID = entity.getPartnerID();
        if (PartnerID != null) {
            stmt.bindString(1, PartnerID);
        }
 
        String PartnerName = entity.getPartnerName();
        if (PartnerName != null) {
            stmt.bindString(2, PartnerName);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(3, Type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomModel entity) {
        stmt.clearBindings();
 
        String PartnerID = entity.getPartnerID();
        if (PartnerID != null) {
            stmt.bindString(1, PartnerID);
        }
 
        String PartnerName = entity.getPartnerName();
        if (PartnerName != null) {
            stmt.bindString(2, PartnerName);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(3, Type);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CustomModel readEntity(Cursor cursor, int offset) {
        CustomModel entity = new CustomModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PartnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PartnerName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomModel entity, int offset) {
        entity.setPartnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPartnerName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CustomModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CustomModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(CustomModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
