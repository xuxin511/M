package com.xx.chinetek.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xx.chinetek.model.Base.MaterialModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIAL_MODEL".
*/
public class MaterialModelDao extends AbstractDao<MaterialModel, Void> {

    public static final String TABLENAME = "MATERIAL_MODEL";

    /**
     * Properties of entity MaterialModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MATNR = new Property(0, String.class, "MATNR", false, "MATNR");
        public final static Property BISMT = new Property(1, String.class, "BISMT", false, "BISMT");
        public final static Property SPART = new Property(2, String.class, "SPART", false, "SPART");
        public final static Property MAKTX = new Property(3, String.class, "MAKTX", false, "MAKTX");
        public final static Property ZMAKTX = new Property(4, String.class, "ZMAKTX", false, "ZMAKTX");
    }


    public MaterialModelDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIAL_MODEL\" (" + //
                "\"MATNR\" TEXT UNIQUE ," + // 0: MATNR
                "\"BISMT\" TEXT," + // 1: BISMT
                "\"SPART\" TEXT," + // 2: SPART
                "\"MAKTX\" TEXT," + // 3: MAKTX
                "\"ZMAKTX\" TEXT);"); // 4: ZMAKTX
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIAL_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaterialModel entity) {
        stmt.clearBindings();
 
        String MATNR = entity.getMATNR();
        if (MATNR != null) {
            stmt.bindString(1, MATNR);
        }
 
        String BISMT = entity.getBISMT();
        if (BISMT != null) {
            stmt.bindString(2, BISMT);
        }
 
        String SPART = entity.getSPART();
        if (SPART != null) {
            stmt.bindString(3, SPART);
        }
 
        String MAKTX = entity.getMAKTX();
        if (MAKTX != null) {
            stmt.bindString(4, MAKTX);
        }
 
        String ZMAKTX = entity.getZMAKTX();
        if (ZMAKTX != null) {
            stmt.bindString(5, ZMAKTX);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaterialModel entity) {
        stmt.clearBindings();
 
        String MATNR = entity.getMATNR();
        if (MATNR != null) {
            stmt.bindString(1, MATNR);
        }
 
        String BISMT = entity.getBISMT();
        if (BISMT != null) {
            stmt.bindString(2, BISMT);
        }
 
        String SPART = entity.getSPART();
        if (SPART != null) {
            stmt.bindString(3, SPART);
        }
 
        String MAKTX = entity.getMAKTX();
        if (MAKTX != null) {
            stmt.bindString(4, MAKTX);
        }
 
        String ZMAKTX = entity.getZMAKTX();
        if (ZMAKTX != null) {
            stmt.bindString(5, ZMAKTX);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaterialModel readEntity(Cursor cursor, int offset) {
        MaterialModel entity = new MaterialModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // MATNR
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BISMT
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SPART
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MAKTX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ZMAKTX
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaterialModel entity, int offset) {
        entity.setMATNR(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBISMT(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSPART(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMAKTX(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZMAKTX(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaterialModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaterialModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(MaterialModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
